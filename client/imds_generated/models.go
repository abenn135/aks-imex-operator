// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/go@4.0.0-preview.69)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package imds_generated

// AttestedData - This is the response from the Attested_GetDocument operation.
type AttestedData struct {
// This is the encoding scheme of the signature.
	Encoding *string

// This is the encoded string containing the VM ID, SKU, plan information, public key, timestamp, and nonce value.
	Signature *string
}

// Compute Metadata
type Compute struct {
// These are additional capabilities defined for VM.
	AdditionalCapabilities *ComputeAdditionalCapabilities

// This is the name of the environment in which the VM is running.
	AzEnvironment *string

// Describes how the VM will be evicted if space needs to be freed up. Only applicable to Spot VMs. For a non-spot VM, this
// will be an empty string.
	EvictionPolicy *string

// Describes the extended location of the VM
	ExtendedLocation *ExtendedLocationProperties

// This contains the data about the host of VM.
	Host *Host

// This contains the data about the host group of VM.
	HostGroup *HostGroup

// Identifies if the VM runs on the Host Compatibility Layer.
	IsHostCompatibilityLayerVM *string

// Type of license for Azure Hybrid Benefit. Note that this is only present for AHB-enabled VMs.
	LicenseType *string

// This is the Azure Region in which the VM is running.
	Location *string

// This is the name of the VM.
	Name *string

// This contains the data about the OS.
	OSProfile *OsProfile

// This value indicates the type of OS the VM is running, either Linux or Windows.
	OSType *string

// This is the offer information for the VM image. This value is only present for images deployed from the Azure Image Gallery.
	Offer *string

// This is the placement group of your Virtual Machine Scale Set.
	PlacementGroupID *string

// This contains the data about the plan.
	Plan *PlanProperties

// This is the fault domain the VM resides in.
	PlatformFaultDomain *string

// This is the sub fault domain the VM resides in, if applicable.
	PlatformSubFaultDomain *string

// This is the update domain the VM resides in.
	PlatformUpdateDomain *string

// This is the priority of the VM.
	Priority *string

// This is the provider of the VM.
	Provider *string

// This is information about the SSH certificate
	PublicKeys []*PublicKeysProperties

// This is the publisher of the VM image.
	Publisher *string

// This is the resource group for the VM.
	ResourceGroupName *string

// This is the fully qualified ID for the VM.
	ResourceID *string

// This is the specific SKU for the VM image.
	SKU *string

// This contains the data about the security profile associated with the VM.
	SecurityProfile *SecurityProfile

// This contains the data about the storage disks associated with the VM.
	StorageProfile *StorageProfile

// This is the Azure subscription for the VM.
	SubscriptionID *string

// This is the list of tags for your VM.
	Tags *string

// This is the list of tags for your VM formatted as a JSON array for easier programmatic parsing.
	TagsList []*TagsProperties

// The set of data specified when the VM was created for use during or after provisioning (Base64 encoded)
	UserData *string

// This is the unique identifier for the VM.
	VMID *string

// This is the resource name of the VMSS.
	VMScaleSetName *string

// This is the size of the VM.
	VMSize *string

// This is the version of the VM image.
	Version *string

// Information about the VMSS the VM belongs to (if applicable)
	VirtualMachineScaleSet *VirtualMachineScaleSet

// This is the availability zone of the VM.
	Zone *string
}

// ComputeAdditionalCapabilities - These are additional capabilities defined for VM.
type ComputeAdditionalCapabilities struct {
// This specifies if hibernation is enabled for VM.
	HibernationEnabled *string
}

// DataDisk - This contains information about the data disk.
type DataDisk struct {
// Disk read/write quota in bytes; only populated for Ultra Disks
	BytesPerSecondThrottle *string

// This is the caching requirements.
	Caching *string

// This is information about how the VM was created.
	CreateOption *string

// Size of disk in bytes; only populated for Ultra Disks
	DiskCapacityBytes *string

// This is the size of the disk in GB.
	DiskSizeGB *string

// This is the source user image virtual hard disk.
	Image *DiskImage

// Identifies if the disk is shared between resources; only populated for Ultra Disks
	IsSharedDisk *string

// Identifies if the data disk is an Ultra Disk
	IsUltraDisk *string

// This is the logical unit number of the disk.
	Lun *string

// This is managed disk parameters.
	ManagedDisk *ManagedDisk

// This is the disk name.
	Name *string

// Disk read/write quota in IOPS; only populated for Ultra Disks
	OpsPerSecondThrottle *string

// This is the virtual hard disk.
	Vhd *VirtualHardDisk

// This specifies whether or not writeAccelerator is enabled on the disk.
	WriteAcceleratorEnabled *string
}

// DiffDiskSettings - This is the ephemeral disk settings.
type DiffDiskSettings struct {
// This specifies the ephemeral disk settings.
	Option *string
}

// DiskImage - This is the source user image virtual hard disk.
type DiskImage struct {
// This is the uri of the virtual hard disk.
	URI *string
}

// EncryptionSettings - This is the encryption settings for the disk.
type EncryptionSettings struct {
// This is the key used for encrypting the disk.
	DiskEncryptionKey *EncryptionSettingsDiskEncryptionKey

// This specifies whether or not disk encryption is enabled on the VM.
	Enabled *string

// This is the key used for encrypting the disk encryption key.
	KeyEncryptionKey *EncryptionSettingsKeyEncryptionKey
}

// EncryptionSettingsDiskEncryptionKey - This is the key used for encrypting the disk.
type EncryptionSettingsDiskEncryptionKey struct {
// This specifies the secret Url of the key stored in keyvault.
	SecretURL *string

// This specifies keyvault used to store the encryption key.
	SourceVault *EncryptionSettingsDiskEncryptionKeySourceVault
}

// EncryptionSettingsDiskEncryptionKeySourceVault - This specifies keyvault used to store the encryption key.
type EncryptionSettingsDiskEncryptionKeySourceVault struct {
// This specifies the resource ID of the keyvault.
	ID *string
}

// EncryptionSettingsKeyEncryptionKey - This is the key used for encrypting the disk encryption key.
type EncryptionSettingsKeyEncryptionKey struct {
// This specifies the secret Url of the key stored in keyvault.
	KeyURL *string

// This specifies keyvault used to store the encryption key.
	SourceVault *EncryptionSettingsKeyEncryptionKeySourceVault
}

// EncryptionSettingsKeyEncryptionKeySourceVault - This specifies keyvault used to store the encryption key.
type EncryptionSettingsKeyEncryptionKeySourceVault struct {
// This specifies the resource ID of the keyvault.
	ID *string
}

// ErrorResponse - This is the response from an operation in the case an error occurs.
type ErrorResponse struct {
// Error message indicating why the operation failed.
	Error *string
}

// ExtendedLocationProperties - Describes the extended location of the VM
type ExtendedLocationProperties struct {
// The name of the extended location of the VM
	Name *string

// The type of the extended location of the VM
	Type *string
}

// Host - This contains data about host of VM
type Host struct {
// This is the name of the host of VM. Note that a VM will either have a host or a hostGroup but not both
	ID *string
}

// HostGroup - This contains data about host group of VM
type HostGroup struct {
// This is the name of the host group of VM. Note that a VM will either have a host or a hostGroup but not both
	ID *string
}

// IPv4Properties - This contains the IPv4 properties.
type IPv4Properties struct {
// This is the private IP address assigned to the interface.
	PrivateIPAddress *string

// This is the public IP address assigned to the interface.
	PublicIPAddress *string
}

// IPv6Properties - This contains the IPv6 properties.
type IPv6Properties struct {
// This is the private IPv6 address assigned to the interface.
	PrivateIPAddress *string
}

// IdentityErrorResponse - This is the response from an Identity operation in the case an error occurs.
type IdentityErrorResponse struct {
// Error code
	Error *Error

// Error message indicating why the operation failed.
	ErrorDescription *string
}

// IdentityInfoResponse - This is the response from the Identity_GetInfo operation.
type IdentityInfoResponse struct {
// This is the AAD tenantId of the identity of the system assigned managed identity.
	TenantID *string
}

// IdentityTokenResponse - This is the response from the Identity_GetToken operation.
type IdentityTokenResponse struct {
// This is the requested access token. The app can use this token to authenticate to the sink resource.
	AccessToken *string

// This is the client_id specified in the request, if any.
	ClientID *string

// This is how long the access token is valid (in seconds).
	ExpiresIn *string

// This is the time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z
// UTC until the expiration time. This value is used to determine the lifetime of
// cached tokens.
	ExpiresOn *string

// This indicates the extended lifetime of the token (in seconds).
	ExtExpiresIn *string

// This is the msiresid specified in the request, if any.
	MsiResID *string

// This is the time when the access token becomes effective. The date is represented as the number of seconds from 1970-01-01T0:0:0Z
// UTC until the expiration time.
	NotBefore *string

// This is the object_id specified in the request, if any.
	ObjectID *string

// This is the app ID URI of the sink resource.
	Resource *string

// This indicates the token type value.
	TokenType *string
}

// ImageReference - This contains information about the OS image.
type ImageReference struct {
// This is the resource ID when using a community image.
	CommunityGalleryImageID *string

// This is the version of the community or direct shared image.
	ExactVersion *string

// This is the resource ID.
	ID *string

// This is the offer of the platform or marketplace image.
	Offer *string

// This is the image publisher.
	Publisher *string

// This is the image SKU.
	SKU *string

// This is the resource ID when using a direct shared image.
	SharedGalleryImageID *string

// This is the version of the platform or marketplace image.
	Version *string
}

// Instance - This is the response from the Instance_GetMetadata operation.
type Instance struct {
// Compute Metadata
	Compute *Compute

// Network Metadata
	Network *Network
}

// ManagedDisk - This is managed disk parameters.
type ManagedDisk struct {
// This is the resource ID.
	ID *string

// This is the storage account type for the managed disk.
	StorageAccountType *string
}

// Network Metadata
type Network struct {
// This contains data about the network interface.
	Interface []*NetworkInterface
}

// NetworkInterface - This contains data about the network interface.
type NetworkInterface struct {
// This contains the IPv4 address.
	IPv4 *NetworkInterfaceIPv4

// This contains the IPv6 address.
	IPv6 *NetworkInterfaceIPv6

// This is the MAC address of the interface.
	MacAddress *string
}

// NetworkInterfaceIPv4 - This contains the IPv4 address.
type NetworkInterfaceIPv4 struct {
// This is the IP address
	IPAddress []*IPv4Properties

// This is the subnet
	Subnet []*SubnetProperties
}

// NetworkInterfaceIPv6 - This contains the IPv6 address.
type NetworkInterfaceIPv6 struct {
// This is the IP address
	IPAddress []*IPv6Properties
}

// OsDisk - This contains information about the OS disk used by the VM.
type OsDisk struct {
// This is the caching requirements.
	Caching *string

// This is information about how the VM was created.
	CreateOption *string

// This is the ephemeral disk settings.
	DiffDiskSettings *DiffDiskSettings

// This is the size of the disk in GB.
	DiskSizeGB *string

// This is the encryption settings for the disk.
	EncryptionSettings *EncryptionSettings

// This is the source user image virtual hard disk.
	Image *DiskImage

// This is managed disk parameters.
	ManagedDisk *ManagedDisk

// This is the disk name.
	Name *string

// This is the type of OS included in the disk.
	OSType *string

// This is the virtual hard disk.
	Vhd *VirtualHardDisk

// This specifies whether or not writeAccelerator is enabled on the disk.
	WriteAcceleratorEnabled *string
}

// OsProfile - This contains the data about the OS.
type OsProfile struct {
// This is admin account.
	AdminUsername *string

// This is the name of the VM.
	ComputerName *string

// This specifies whether or not password authentication is disabled. Note that this is present only for Linux VMs. For a
// Windows VM, this value will be the empty string.
	DisablePasswordAuthentication *string
}

// PlanProperties - This contains the data about the plan.
type PlanProperties struct {
// This is the Plan ID.
	Name *string

// This is the product of the image from the Marketplace.
	Product *string

// This is the publisher ID.
	Publisher *string
}

// PublicKeysProperties - This contains the data about the public key.
type PublicKeysProperties struct {
// This is the SSH public key certificate used to authenticate with the VM.
	KeyData *string

// This specifies the full path on the VM where the SSH public key is stored.
	Path *string
}

// SecurityProfile - This contains the data about the security profile associated with the VM.
type SecurityProfile struct {
// Identifies if encryption at host is enabled on the VM
	EncryptionAtHost *string

// Identifies if UEFI secure boot is enabled on the VM
	SecureBootEnabled *string

// Identifies if the VM is a Trusted VM or a Confidential VM
	SecurityType *string

// Identifies if the virtual Trusted Platform Module (TPM) is enabled on the VM
	VirtualTpmEnabled *string
}

// StorageProfile - This contains the data about the storage disks associated with the VM.
type StorageProfile struct {
// Data disk information
	DataDisks []*DataDisk

// Image information
	ImageReference *ImageReference

// OS disk information
	OSDisk *OsDisk

// This contains data for the size of local temp disk of the VM, if it exists.
	ResourceDisk *StorageProfileResourceDisk
}

// StorageProfileResourceDisk - This contains data for the size of local temp disk of the VM, if it exists.
type StorageProfileResourceDisk struct {
// The size of the local temp disk of the VM if it exists, in kilobytes. If the VM has no local temp disk, this value is 0.
	Size *string
}

// SubnetProperties - This contains the properties of the subnet.
type SubnetProperties struct {
// This is the address range of the subnet.
	Address *string

// This is the prefix of the subnet.
	Prefix *string
}

// TagsProperties - This contains the properties of the tags in a tagsList.
type TagsProperties struct {
// This is the name of the tag. It is equivalent to the key in the key-value pair format.
	Name *string

// This is the value of the tag. It is, as expected, equivalent to the value in the key-value pair format.
	Value *string
}

// Versions - This is the response from the GetVersions operation.
type Versions struct {
// List of API versions supported.
	APIVersions []*string
}

// VirtualHardDisk - This is the virtual hard disk.
type VirtualHardDisk struct {
// This is the uri of the virtual hard disk.
	URI *string
}

// VirtualMachineScaleSet - Information about the VMSS the VM belongs to (if applicable)
type VirtualMachineScaleSet struct {
// This is the ID of the VMSS the VM belongs to (if applicable)
	ID *string
}


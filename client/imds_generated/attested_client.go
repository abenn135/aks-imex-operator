// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/go@4.0.0-preview.69)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package imds_generated

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// AttestedClient contains the methods for the Attested group.
// Don't use this type directly, use a constructor function instead.
type AttestedClient struct {
	internal *azcore.Client
}

// GetDocument - Get Attested Data for the Virtual Machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01
//   - metadata - This must be set to 'true'.
//   - options - AttestedClientGetDocumentOptions contains the optional parameters for the AttestedClient.GetDocument method.
func (client *AttestedClient) GetDocument(ctx context.Context, metadata Enum1, options *AttestedClientGetDocumentOptions) (AttestedClientGetDocumentResponse, error) {
	var err error
	req, err := client.getDocumentCreateRequest(ctx, metadata, options)
	if err != nil {
		return AttestedClientGetDocumentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AttestedClientGetDocumentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AttestedClientGetDocumentResponse{}, err
	}
	resp, err := client.getDocumentHandleResponse(httpResp)
	return resp, err
}

// getDocumentCreateRequest creates the GetDocument request.
func (client *AttestedClient) getDocumentCreateRequest(ctx context.Context, metadata Enum1, options *AttestedClientGetDocumentOptions) (*policy.Request, error) {
	urlPath := "/attested/document"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01")
	if options != nil && options.Nonce != nil {
		reqQP.Set("nonce", *options.Nonce)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Metadata"] = []string{string(metadata)}
	return req, nil
}

// getDocumentHandleResponse handles the GetDocument response.
func (client *AttestedClient) getDocumentHandleResponse(resp *http.Response) (AttestedClientGetDocumentResponse, error) {
	result := AttestedClientGetDocumentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AttestedData); err != nil {
		return AttestedClientGetDocumentResponse{}, err
	}
	return result, nil
}


// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/go@4.0.0-preview.69)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package imds_generated

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// IdentityClient contains the methods for the Identity group.
// Don't use this type directly, use a constructor function instead.
type IdentityClient struct {
	internal *azcore.Client
}

// GetInfo - Get information about AAD Metadata
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01
//   - metadata - This must be set to 'true'.
//   - options - IdentityClientGetInfoOptions contains the optional parameters for the IdentityClient.GetInfo method.
func (client *IdentityClient) GetInfo(ctx context.Context, metadata Enum1, options *IdentityClientGetInfoOptions) (IdentityClientGetInfoResponse, error) {
	var err error
	req, err := client.getInfoCreateRequest(ctx, metadata, options)
	if err != nil {
		return IdentityClientGetInfoResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IdentityClientGetInfoResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IdentityClientGetInfoResponse{}, err
	}
	resp, err := client.getInfoHandleResponse(httpResp)
	return resp, err
}

// getInfoCreateRequest creates the GetInfo request.
func (client *IdentityClient) getInfoCreateRequest(ctx context.Context, metadata Enum1, _ *IdentityClientGetInfoOptions) (*policy.Request, error) {
	urlPath := "/identity/info"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Metadata"] = []string{string(metadata)}
	return req, nil
}

// getInfoHandleResponse handles the GetInfo response.
func (client *IdentityClient) getInfoHandleResponse(resp *http.Response) (IdentityClientGetInfoResponse, error) {
	result := IdentityClientGetInfoResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IdentityInfoResponse); err != nil {
		return IdentityClientGetInfoResponse{}, err
	}
	return result, nil
}

// GetToken - Get a Token from Azure AD
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01
//   - metadata - This must be set to 'true'.
//   - resource - This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token
//     contains the corresponding aud for this resource.
//   - options - IdentityClientGetTokenOptions contains the optional parameters for the IdentityClient.GetToken method.
func (client *IdentityClient) GetToken(ctx context.Context, metadata Enum1, resource string, options *IdentityClientGetTokenOptions) (IdentityClientGetTokenResponse, error) {
	var err error
	req, err := client.getTokenCreateRequest(ctx, metadata, resource, options)
	if err != nil {
		return IdentityClientGetTokenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IdentityClientGetTokenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IdentityClientGetTokenResponse{}, err
	}
	resp, err := client.getTokenHandleResponse(httpResp)
	return resp, err
}

// getTokenCreateRequest creates the GetToken request.
func (client *IdentityClient) getTokenCreateRequest(ctx context.Context, metadata Enum1, resource string, options *IdentityClientGetTokenOptions) (*policy.Request, error) {
	urlPath := "/identity/oauth2/token"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01")
	if options != nil && options.Authority != nil {
		reqQP.Set("authority", *options.Authority)
	}
	if options != nil && options.BypassCache != nil {
		reqQP.Set("bypass_cache", string(*options.BypassCache))
	}
	if options != nil && options.ClientID != nil {
		reqQP.Set("client_id", *options.ClientID)
	}
	if options != nil && options.MsiResID != nil {
		reqQP.Set("msi_res_id", *options.MsiResID)
	}
	if options != nil && options.ObjectID != nil {
		reqQP.Set("object_id", *options.ObjectID)
	}
	reqQP.Set("resource", resource)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Metadata"] = []string{string(metadata)}
	return req, nil
}

// getTokenHandleResponse handles the GetToken response.
func (client *IdentityClient) getTokenHandleResponse(resp *http.Response) (IdentityClientGetTokenResponse, error) {
	result := IdentityClientGetTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IdentityTokenResponse); err != nil {
		return IdentityClientGetTokenResponse{}, err
	}
	return result, nil
}


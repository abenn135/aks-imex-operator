// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/go@4.0.0-preview.69)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package imds_generated

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// InstancesClient contains the methods for the Instances group.
// Don't use this type directly, use a constructor function instead.
type InstancesClient struct {
	internal *azcore.Client
}

// GetMetadata - Get Instance Metadata for the Virtual Machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01
//   - metadata - This must be set to 'true'.
//   - options - InstancesClientGetMetadataOptions contains the optional parameters for the InstancesClient.GetMetadata method.
func (client *InstancesClient) GetMetadata(ctx context.Context, metadata Enum1, options *InstancesClientGetMetadataOptions) (InstancesClientGetMetadataResponse, error) {
	var err error
	req, err := client.getMetadataCreateRequest(ctx, metadata, options)
	if err != nil {
		return InstancesClientGetMetadataResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return InstancesClientGetMetadataResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return InstancesClientGetMetadataResponse{}, err
	}
	resp, err := client.getMetadataHandleResponse(httpResp)
	return resp, err
}

// getMetadataCreateRequest creates the GetMetadata request.
func (client *InstancesClient) getMetadataCreateRequest(ctx context.Context, metadata Enum1, _ *InstancesClientGetMetadataOptions) (*policy.Request, error) {
	urlPath := "/instance"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Metadata"] = []string{string(metadata)}
	return req, nil
}

// getMetadataHandleResponse handles the GetMetadata response.
func (client *InstancesClient) getMetadataHandleResponse(resp *http.Response) (InstancesClientGetMetadataResponse, error) {
	result := InstancesClientGetMetadataResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Instance); err != nil {
		return InstancesClientGetMetadataResponse{}, err
	}
	return result, nil
}

